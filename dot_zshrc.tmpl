# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
export PATH=/opt/cuda/bin:/opt/cuda/nsight-compute${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/opt/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/cuda/extras/CUPTI/lib64
#
export PATH=$HOME/.local/bin:$PATH

{{- if eq .chezmoi.os "darwin" }}
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
export MANPATH=/opt/local/share/man:${MANPATH:+:${MANPATH}}
{{- end }}

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git extract)

source $ZSH/oh-my-zsh.sh

# User configuration

setopt    appendhistory     #Append history to the history file (no overwriting)
setopt    sharehistory      #Share history across terminals
setopt    incappendhistory  #Immediately append to the history file, not just when a term is killed

unsetopt  BEEP

export VISUAL=nvim

# Emacs TRAMP may have issues parsing complex prompt. Let's change the prompt
# to just "$ ".
if [[ "$TERM" == "dumb" ]]; then
  unset zle_bracketed_paste
  unset zle
  PS1='$ '
  return
fi

# n (Node version manager) install path
export N_PREFIX=$HOME/.local
# export XDG_CONFIG_HOME=$HOME/.config
# export MANPATH="/usr/local/man:$MANPATH"

# TODO: what is this? I have had it for a while, do not remember why I added
# it. Probably, I had some issues without it.
[ -f /etc/profile.d/vte.sh ] && source /etc/profile.d/vte.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

alias vi='nvim'

{{- if eq .chezmoi.os "linux" }}
alias pbcopy='xsel --clipboard --input'
alias pbpaste='xsel --clipboard --output'
# alias pbcopy='xclip -selection clipboard'
# alias pbpaste='xclip -selection clipboard -o'
alias open='xdg-open'
{{- end }}

if type workon >/dev/null 2>&1; then
  VENV_WRAPPER=true
else
  VENV_WRAPPER=false
fi

function _virtualenv_auto_activate() {
    if [ -e "env" ]; then
        # Check for symlink pointing to virtualenv
        if [ -L "env" ]; then
            _VENV_PATH=$(readlink env)
            _VENV_WRAPPER_ACTIVATE=false
            # Check for directory containing virtualenv
        elif [ -d "env" ]; then
            _VENV_PATH=$(pwd -P)/env
            _VENV_WRAPPER_ACTIVATE=false
            # Check for file containing name of virtualenv
        elif [ -f "env" -a $VENV_WRAPPER = "true" ]; then
            _VENV_PATH=$WORKON_HOME/$(cat env)
            _VENV_WRAPPER_ACTIVATE=true
        else
            return
        fi

        # Check to see if already activated to avoid redundant activating
        if [ ! "$VIRTUAL_ENV" -ef "$_VENV_PATH" ]; then
            if $_VENV_WRAPPER_ACTIVATE; then
                _VENV_NAME=$(basename $_VENV_PATH)
                workon $_VENV_NAME
            else
                _VENV_NAME=$(basename `pwd`)
                VIRTUAL_ENV_DISABLE_PROMPT=1
                source env/bin/activate
                _OLD_VIRTUAL_PS1="$PS1"
                PS1="($_VENV_NAME)$PS1"
                export PS1
            fi
            echo Activated virtualenv \"$_VENV_NAME\".
        fi
    fi
}

# function chpwd() {
    # _virtualenv_auto_activate
# }
# _virtualenv_auto_activate
precmd() { _virtualenv_auto_activate }

mkcdir ()
{
    mkdir -p -- "$1" &&
      cd -P -- "$1"
}

# Make ctrl+p, ctrl+n behave exactly like up, down arrows correspondingly.
bindkey "^P" up-line-or-beginning-search
bindkey "^N" down-line-or-beginning-search

# Change word movement.
# Vi style of word makes more sense than words in emacs keymap:
# e.g. if you press twice ^W with default emacs bindings the following string
# "zsh -d -f -i|" becomes "zsh -d -|",
# but with vi style it becomes "zsh -d -f |".
# In general, emacs bindings respect the $WORDCHARS variable that lists which
# non-alphanumeric characters are part of a word,
# see https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-WORDCHARS.
# Note, vi-style doesn't respect WORDCHARS, so you will have to implement your
# own functions and replace builtin widgets.
bindkey "^W" vi-backward-kill-word
bindkey "^[B" vi-backward-word
bindkey "^[D" vi-forbard-kill-word
bindkey "^[F" vi-forward-word


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/snich/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/snich/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/snich/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/snich/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# Direnv configuration. direnv is an extension for your shell. It augments
# existing shells with a new feature that can load and unload environment
# variables depending on the current directory.

# For direnv to work properly it needs to be hooked into the shell.
eval "$(direnv hook zsh)"
# It is recommended to wrap tmux to avoid issues with environment loading.
# Source: https://github.com/direnv/direnv/wiki/Tmux
alias tmux='direnv exec / tmux'
